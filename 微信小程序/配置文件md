

# 配置文件

**默认开发目录：**

```text
├── app.js
├── app.json
├── app.wxss
├── pages
│   │── index
│   │   ├── index.wxml
│   │   ├── index.js
│   │   ├── index.json
│   │   └── index.wxss
│   └── logs
│       ├── logs.wxml
│       └── logs.js
└── utils
```

## app.json

> `app.json` 是小程序的**全局配置**，包括了小程序的**所有页面路径**、**界面表现**、**网络超时时间**、**底部 tab** 等。

```json
{
    # 以下2个字段为必填
    "sitemapLocation":"sitemap.json", // 指明 sitemap.json 的位置
    "pages":[ // 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。小程序中新增/减少页面，都需要对 pages 数组进行修改。 未指定 entryPagePath 时，数组的第一项代表小程序的初始页面（首页）
        "pages/index/index",
        "pages/logs/logs"
    ],
    
    # 以下字段可不填
    "entryPagePath":"pages/index/index", // 默认小程序默认启动首页
    "window":{ // 定义小程序所有页面的状态栏、导航条、标题、窗口背景色等
        "backgroundTextStyle":"light",
        "navigationBarBackgroundColor": "#fff", // 导航栏背景颜色,默认#000000
        "navigationBarTitleText": "Weixin", // 导航栏标题文字内容
        "navigationBarTextStyle":"black", // 导航栏标题颜色，仅支持 black / white。 默认white
        "navigationStyle":"default", // 导航栏样式，仅支持以下值：default 默认样,custom 自定义导航栏，只保留右上角胶囊按钮。
        "backgroundColor":"#ffffff", // 窗口的背景色
        "backgroundTextStyle":"dark", // 下拉 loading 的样式，仅支持 dark / light
        "backgroundColorTop":"#ffffff", //顶部窗口的背景色，仅 iOS 支持
        "backgroundColorBottom": "#ffffff", // 底部窗口的背景色，仅 iOS 支持
        "enablePullDownRefresh": false, // 是否开启全局的下拉刷新, 详见 Page.onPullDownRefresh
        "onReachBottomDistance": 50, //页面上拉触底事件触发时距页面底部距离，单位为 px。详见 Page.onReachBottom
        "pageOrientation": "portrait", // 屏幕旋转,支持 auto / portrait(竖) / landscape(横)
    },
	"resizable": true, // 在 iPad 上运行的小程序可以支持屏幕旋转,注意不能单独配置某个页面是否支持屏幕旋转
    "tabBar": { // 底部/顶部 tab 栏的表现
        "color":"#000", // tab 上的文字默认颜色
        "selectedColor":"#eee", // tab 上的文字选中时的颜色
        "backgroundColor":"#fff", // tab 的背景色
        "borderStyle":"black", // tabbar 上边框的颜色， 仅支持 black / white
        "position": "bottom",  // tabBar 的位置，仅支持 bottom / top
        "custom": false, // 自定义 tabBar
        "list": [{ // tab 的列表，最少 2 个、最多 5 个 tab
            "pagePath": "pages/index/index", // 页面路径
            "text": "首页", // tab 上按钮文字
            "iconPath": "", // 图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，不支持网络图片。当 position 为 top 时，不显示 icon
            "selectedIconPath":"", // 选中时的图片路径
        }, {
            "pagePath": "pages/logs/index",
            "text": "日志"
        }]
    },
    "networkTimeout": { // 网络请求的超时时间
        "request": 10000, // wx.request 的超时时间,默认60000
        "connectSocket":10000, // wx.connectSocket 的超时时间,默认60000
        "downloadFile": 10000, // wx.downloadFile 的超时时间,默认60000
        "uploadFile":10000 // wx.uploadFile 的超时时间,默认60000
    },
    "debug": true, // 在开发者工具中开启 debug 模式,调试信息以 info 的形式给出
    "navigateToMiniProgramAppIdList": [
        "wxe5f52902cf4de896"
    ],

	"functionalPages": , //插件所有者小程序需要设置这一项来启用插件功能页
	"subpackages": , // 启用分包加载(按需加载)时，声明项目分包结构
	"preloadRule": , // 声明分包预下载的规则
	"lazyCodeLoading":"requiredComponents", // 通常情况下，在小程序启动期间，所有页面及自定义组件的代码都会进行注入，当前页面没有使用到的自定义组件和页面在注入后其实并没有被使用.所以小程序支持有选择地注入必要的代码，以降低小程序的启动时间和运行时内存
	"workers": "workers", // 使用 Worker 处理 多线程任务 时，设置 Worker 代码放置的目录
	"requiredBackgroundModes": ["audio", "location"], // 申明需要后台运行的能力。目前支持 audio: 后台音乐播放、location: 后台定位。开发版和体验版上可以直接生效，正式版还需通过审核
	"plugins": , // 声明小程序需要使用的插件
	"usingComponents": , // 在此处声明的自定义组件视为全局自定义组件，在小程序内的页面或自定义组件中可以直接使用而无需再声明。
	"permission":  {// 小程序接口权限相关设置
    	"scope.userLocation": { // 位置相关权限声明
             "desc": "你的位置信息将用于小程序位置接口的效果展示" // 高速公路行驶持续后台定位
    	},
	}, 
	"style": "v2", //启用新版的组件样式,涉及的组件有 button icon radio checkbox switch slider
	"useExtendedLib": { // 指定需要引用的扩展库。目前支持 kbone、weui
    	"kbone": true,
    	"weui": true
  		}
	}, 
	"entranceDeclare":{ // 聊天位置消息用打车类小程序打开
        "locationMessage": {
        	"path": "pages/index/index",
        	"query": "foo=bar"
    	}
    },
	"darkmode": true, //表示当前小程序可适配 DarkMode，所有基础组件均会根据系统主题展示不同的默认样式. 配置后，请根据DarkMode 适配指南自行完成基础样式以外的适配工作
	"themeLocation": "/path/to/theme.json",  // 自定义 theme.json 的路径，当配置"darkmode":true时，当前配置文件为必填项
	"singlePage": { // 单页模式相关配置，目前 分享到朋友圈 (Beta) 后打开会进入单页模式
        "navigationBarFit": "float或者squeezed" // 默认自动调整，若原页面是自定义导航栏，则为 float，否则为 squeezed。导航栏与页面的相交状态，值为 float 时表示导航栏浮在页面上，与页面相交；值为 squeezed 时表示页面被导航栏挤压，与页面不相交
    }, 
}
```

<img src="../assets/Applets/tabbar.jpg" style="zoom:67%;" />

![](../assets/Applets/location.jpg)

### 单独页面配置

每一个小程序页面也可以使用 **同名 `.json`** 文件来对本页面的窗口表现进行配置，页面中配置项会覆盖 `app.json` 的 `window` 中相同的配置项。

> 页面配置中**只能设置 `app.json` 中 `window` 对应的配置项**，以决定本页面的窗口表现，**所以无需写 `window` 这个属性**。

```json
{
    "navigationBarBackgroundColor": "#000000", // 导航栏背景颜色
    "navigationBarTextStyle": "white", //导航栏标题颜色，仅支持 black / white
    "navigationBarTitleText": "微信接口功能演示", // 导航栏标题文字内容
    "navigationStyle": "default", //导航栏样式，仅支持以下值：default 默认样式、custom 自定义导航栏，只保留右上角胶囊按钮
    "backgroundColor": "#eeeeee", // 窗口的背景色
    "backgroundTextStyle": "light", // 下拉 loading 的样式，仅支持 dark / light
    "backgroundColorTop": "#ffffff", // 顶部窗口的背景色，仅 iOS 支持
    "backgroundColorBottom": "#ffffff", // 底部窗口的背景色，仅 iOS 支持
    "enablePullDownRefresh": false, //是否开启当前页面下拉刷新。
    "onReachBottomDistance": 50, // 页面上拉触底事件触发时距页面底部距离，单位为px。
    "pageOrientation": "auto", // 屏幕旋转设置，支持 auto / portrait / landscape
    "disableScroll": false, // 设置为 true 则禁止页面整体上下滚动。只在页面配置中有效，无法在 app.json 中设置
    "usingComponents":{}, // 页面自定义组件配置
    "initialRenderingCache": , //页面初始渲染缓存配置
    "style": "default", // 启用新版的组件样式
    "singlePage" : {} // 单页模式相关配置
    
}
```

<img src="../assets/Applets/window.jpg" style="zoom: 67%;" />

## sitemap.json

> `sitemap.json` 文件用于配置**小程序**及**其页面**是否允许被**微信索引**，文件内容为一个 JSON 对象，如果没有 `sitemap.json` ，则默认为所有页面都允许被索引

当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索词条触发该索引时，小程序的页面将可能展示在搜索结果中。 爬虫访问小程序内页面时，会携带特定的 **user-agent：`mpcrawler`** 及[场景值](https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html)：**`1129`**。需要注意的是，若小程序爬虫发现的页面数据和真实用户的呈现不一致，那么该页面将不会进入索引中。

**注：`sitemap` 的索引提示是默认开启的，如需要关闭 `sitemap` 的索引提示，可在小程序项目配置文件 `project.config.json` 的 `setting` 中配置字段 `checkSiteMap` 为 `false`**

**注: `sitemap` 文件内容最大为 5120 个 UTF8 字符**

**注：没有 sitemap.json 则默认所有页面都能被索引**

**注：`{"action": "allow", "page": "\*"}` 是优先级最低的默认规则，未显式指明 "disallow" 的都默认被索引**

```json
{
    "rules":[{
        "action": "allow", // 只有"allow"、"disallow"两个值，命中该规则的页面是否能被索引,
        "page": "path/to/page", // 取值："*"、页面的路径。* 表示所有页面，不能作为通配符使用
        "params": ["a", "b"], // 当 page 字段指定的页面在被本规则匹配时可能使用的页面参数名称的列表（不含参数值）
        "matching": "exact", // 当 page 字段指定的页面在被本规则匹配时，此参数说明 params 匹配方式
        "priority": 1  // 优先级.  值越大则规则越早被匹配，否则默认从上到下匹配
    }, {
        "action": "disallow",
        "page": "path/to/page",
        "priority": 2
    }]
}
```

**matching 取值说明**

| 值        | 说明                                                       |
| --------- | ---------------------------------------------------------- |
| exact     | 当小程序页面的参数列表**等于** params 时，规则命中         |
| inclusive | 当小程序页面的参数列表**包含** params 时，规则命中         |
| exclusive | 当小程序页面的参数列表与 params **交集为空**时，规则命中   |
| partial   | 当小程序页面的参数列表与 params **交集不为空**时，规则命中 |

```json
{
  "rules":[{
    "action": "allow",
    "page": "path/to/page",
    "params": ["a", "b"],
    "matching": "exact"
  }, {
    "action": "disallow",
    "page": "path/to/page"
  }]
}
```

- `path/to/page?a=1&b=2` => 优先索引
- `path/to/page` => 不被索引
- `path/to/page?a=1` => 不被索引
- `path/to/page?a=1&b=2&c=3` => 不被索引
- 其他页面都会被索引

```json
{
  "rules":[{
    "action": "allow",
    "page": "path/to/page",
    "params": ["a", "b"],
    "matching": "inclusive"
  }, {
    "action": "disallow",
    "page": "path/to/page"
  }]
}
```

- `path/to/page?a=1&b=2` => 优先索引
- `path/to/page?a=1&b=2&c=3` => 优先索引
- `path/to/page` => 不被索引
- `path/to/page?a=1` => 不被索引
- 其他页面都会被索引

```json
{
  "rules":[{
    "action": "allow",
    "page": "path/to/page",
    "params": ["a", "b"],
    "matching": "exclusive"
  }, {
    "action": "disallow",
    "page": "path/to/page"
  }]
}
```

- `path/to/page` => 优先索引
- `path/to/page?c=3` => 优先索引
- `path/to/page?a=1` => 不被索引
- `path/to/page?a=1&b=2` => 不被索引
- 其他页面都会被索引

```json
{
  "rules":[{
    "action": "allow",
    "page": "path/to/page",
    "params": ["a", "b"],
    "matching": "partial"
  }, {
    "action": "disallow",
    "page": "path/to/page"
  }]
}
```

- `path/to/page?a=1` => 优先索引
- `path/to/page?a=1&b=2` => 优先索引
- `path/to/page` => 不被索引
- `path/to/page?c=3` => 不被索引
- 其他页面都会被索引

![](../assets/Applets/sitemap.png)

## project.config.json 工具配置

> 通常大家在使用一个工具的时候，都会针对各自喜好做一些个性化配置，例如界面颜色、编译配置等等，当你换了另外一台电脑重新安装工具的时候，你还要重新配置。小程序开发者工具在每个项目的根目录都会生成一个 `project.config.json`，你在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项

## 'page'.json 页面配置

这里的 **`page.json`** 其实用来表示 **pages/logs** 目录下的 **`logs.json`** 这类和小程序页面相关的配置。

如果你整个小程序的风格是蓝色调，那么你可以在 `app.json` 里边声明顶部颜色是蓝色即可。实际情况可能不是这样，可能你小程序里边的每个页面都有不一样的色调来区分不同功能模块，因此我们提供了 `page.json`，让开发者可以独立定义每个页面的一些属性，例如刚刚说的顶部颜色、是否允许下拉刷新等等。